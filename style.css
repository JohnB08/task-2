body {
  margin: 0;
  padding: 0;
  font-family: "Montserrat", sans-serif;
  color: #540b0e;
  font-size: 24px;
}
/* text formating */
h2,
h3 {
  font-weight: 700;
}
h3 {
  font-size: 1.5em;
}
h2 {
  text-align: center;
  font-size: 1.8em;
  background: #dedbd2;
  color: #315d44;
  padding: 0.417em 0.84em;
  border-radius: 5px;
  box-shadow: 0px 0px 10px #dedbd2;
}
.header {
  color: #252525;
  background-color: whitesmoke;
  margin-bottom: 0;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  box-shadow: none;
}
h2 span {
  display: block;
  font-size: 2em;
  /* This had a compounding error, since the parent element allready had a font-size of 1.8em, this became 3 times 1.8 times 24 px, instead of 3 times 24px which i had intended. Now it's closer to what i had in mind. */
  background: url("./img/forest_trees_autumn.jpg");
  -webkit-text-fill-color: transparent;
  -webkit-background-clip: text;
  background-clip: text;
  /* Visual Studio says this should work with the standard "background-clip" but it doesn't. how come? I also tried making the text transparent by setting the opacity in the rgba value to 0, but that also didn't work. found some webkit workarounds, but this will mean it won't work on older browsers.*/
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed;
  /* This isn't very readable, but looks very cool. */
}
/* containers */

/* backgrounds */
.container {
  display: flex;
  height: 100vh;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  background-attachment: fixed;
  /* Seems with flexbox you don't need position:relative; since flexbox makes every background into separate boxes anyway so you don't need to differenciate between them for the text to show up correctly. */
}
.first {
  justify-content: end;
}
.first,
.fourth {
  background-image: url("./img/eagle.jpg");
}
.second {
  background-image: url("./img/bg2.jpg");
}
.third {
  background-image: url("./img/bg3.jpg");
}
.second,
.third {
  opacity: 90%;
  /* The colors on the background was originally very sharp, adding just a slight opacity made it look way better. I could increase it again if i want that high contrast. */
}
/* boxes */
.vertical-divider {
  width: 100%;
  border-bottom: 3px solid goldenrod;
  margin-top: 0;
  box-shadow: 0px 2px 2px rgb(67, 57, 0);
  /* I could probably make something else to make this work, but this felt like a neat workaround for having that divider below the header element. */
}
.main {
  display: flex;
  justify-content: space-around;
  align-items: center;
  background-color: #fff3b0;
  padding: 1.67em;
  text-align: center;
  flex-wrap: wrap;
}
.text-right {
  flex-direction: row-reverse;
}
.text-container {
  padding: 0.84em;
}
/* images */
.image-container {
  width: 30vw;
  /* Technically this class isn't needed, it's a leftover after I experimented with image sizing and fitting, but I'm gonna keep it around because I might need it for more experimentation */
}
img {
  width: 100%;
  border-radius: 16px;
  box-shadow: 3px 3px 2px rgb(11, 53, 11);
}
.left-aligned-img {
  box-shadow: -3px 3px 2px rgb(11, 53, 11);
}
.footer {
  font-size: 0.584em;
  text-align: end;
  padding: 0.34em;
}
.footer a {
  text-decoration: none;
  font: inherit;
  color: rgb(103, 155, 173);
}
.footer a:hover,
.footer a:focus {
  color: rgb(150, 53, 53);
}
@media only screen and (max-width: 768px) {
  body {
    font-size: 10px;
  }
  .first,
  .second,
  .third,
  .fourth {
    max-height: 50vh;
  }
}
@media only screen and (min-width: 1280px) {
  body {
    font-size: 36px;
  }
}
/* This just makes the text abit smaller on smaller screens. Good way to practise using "em" for text. one variable changes everything. For now, I think I want to keep the fixed scroll on my phone, seems to work fine during testing.*/
